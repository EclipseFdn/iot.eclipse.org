<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Standards on Eclipse IoT</title>
    <link>http://iot.eclipse.org/standards/index.xml</link>
    <description>Recent content in Standards on Eclipse IoT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Nov 2016 17:57:25 +0100</lastBuildDate>
    <atom:link href="http://iot.eclipse.org/standards/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>coap</title>
      <link>http://iot.eclipse.org/standards/coap/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>http://iot.eclipse.org/standards/coap/</guid>
      <description>&lt;p&gt;&lt;strong&gt;CoAP&lt;/strong&gt; (Constrained Application Protocol) is a protocol specialized for use with constrained nodes and networks.&lt;/p&gt;
&lt;p&gt;It implements the REST architectural style, it can be transparently mapped to HTTP. However, CoAP also provides features that go beyond HTTP such as native push notifications and group communication.&lt;/p&gt;
&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Download a CoAP runtime
    &lt;/h2&gt;
    &lt;p&gt;
      The
      &lt;a href=&#34;http://www.eclipse.org/californium/&#34; target=&#34;_blank&#34;&gt;Eclipse Californium project&lt;/a&gt; provides a Java implementation of the CoAP protocol, including support for the DTLS security layer. The source code of Californium is available from the
      &lt;a href=&#34;http://www.eclipse.org/californium&#34;&gt;project webpage&lt;/a&gt;, and is also available from Maven Central.&lt;/p&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; CoAP Sandbox Server
    &lt;/h2&gt;
    &lt;p&gt;
      We provide a
      &lt;a href=&#34;sandbox.html#coap&#34;&gt;sandbox server&lt;/a&gt; that exposes some testing resources over CoAP. You can use it to test your CoAP communication scenarios.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>dtls</title>
      <link>http://iot.eclipse.org/standards/dtls/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>http://iot.eclipse.org/standards/dtls/</guid>
      <description>&lt;p&gt;
  The &lt;strong&gt;Datagram Transport Layer Security (DTLS)&lt;/strong&gt; protocol provides communications security for datagram protocols such as. DTLS allows datagram-based applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. For IoT applications, DTLS can be used to secure CoAP-based communications.
&lt;/p&gt;
&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Download a DTLS implementation
    &lt;/h2&gt;
    &lt;p&gt;The
      &lt;a href=&#34;https://eclipse.org/tinydtls&#34; target=&#34;_blank&#34;&gt;Eclipse tinydtls project&lt;/a&gt; provides a light-weight implementation of the DTLS protocol that can be used in devices with tight memory constraints, i.e. in the order of 100 KiB flash memory and about 10 KiB RAM. You can
      &lt;a href=&#34;http://git.eclipse.org/c/tinydtls/org.eclipse.tinydtls.git&#34; target=&#34;_blank&#34;&gt;download tinydtls source code&lt;/a&gt; from the project&#39;s Git repository.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>iec-15118</title>
      <link>http://iot.eclipse.org/standards/iec-15118/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>http://iot.eclipse.org/standards/iec-15118/</guid>
      <description>&lt;p&gt;
  The international standard &lt;strong&gt;ISO/IEC 15118&lt;/strong&gt;, entitled &#34;Road vehicles - Vehicle to grid communication interface&#34;, defines a digital IP-based communication interface between an electric vehicle (EV) and a charging station (named Electric Vehicle Supply Equipment - EVSE).
&lt;/p&gt;
&lt;p&gt;
  It allows for a user-friendly &#34;plug-and-charge&#34; mechanism for authentication, authorization, billing, and flexible load control based on a wide set of information exchanged between the EV and EVSE.
&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Download an IEC-15118 runtime
    &lt;/h2&gt; The
    &lt;a href=&#34;http://www.eclipse.org/risev2g/&#34; target=&#34;_blank&#34;&gt;Eclipse RISE V2G project&lt;/a&gt; provides a Java implementation of the IEC-15118 standard that allows to implement clients (a.k.a. electric vehicles communication controllers) as well as servers (a.k.a. charging stations). The source code of RISE V2G is available on the project&#39;s
    &lt;a href=&#34;https://www.github.com/eclipse/risev2g&#34;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>iec-61499</title>
      <link>http://iot.eclipse.org/standards/iec-61499/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>http://iot.eclipse.org/standards/iec-61499/</guid>
      <description>&lt;p&gt;
  The international standard &lt;strong&gt;IEC 61499&lt;/strong&gt;, addressing the topic of function blocks for industrial process measurement and control system. The specification of IEC 61499 defines a generic model for distributed control systems and is based on the IEC 61131 standard.
&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Download an IEC-61499 toolset and runtime
    &lt;/h2&gt;
    &lt;p&gt;The
      &lt;a href=&#34;https://eclipse.org/4diac&#34; target=&#34;_blank&#34;&gt;Eclipse 4DIAC project&lt;/a&gt; provides an industrial-grade open source infrastructure for distributed Industrial Process Measurement and Control Systems (IPMCS) based on the IEC 61499 standard.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>lwm2m</title>
      <link>http://iot.eclipse.org/standards/lwm2m/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>http://iot.eclipse.org/standards/lwm2m/</guid>
      <description>&lt;p&gt;
  &lt;strong&gt;OMA LightweightM2M (LWM2M)&lt;/strong&gt; is an industry standard for device management of M2M/IoT devices. It heavily relies on CoAP and therefore is optimized for communications over sensor or cellular networks.
&lt;/p&gt;
&lt;p&gt;
  OMA LWM2M provides an extensible object model that allows to enable application data exchanges in addition to the core device management features (firmware upgrade, connectivity monitoring, &amp;hellip;)
&lt;/p&gt;
&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Download a LWM2M runtime
    &lt;/h2&gt;
    &lt;p&gt;
      The
      &lt;a href=&#34;http://www.eclipse.org/wakaama/&#34; target=&#34;_blank&#34;&gt;Eclipse Wakaama project&lt;/a&gt; provides a &lt;strong&gt;C portable framework&lt;/strong&gt; for building LWM2M clients and/or servers. The source code of Wakaama is available from the
      &lt;a href=&#34;http://www.eclipse.org/wakaama&#34;&gt;project webpage&lt;/a&gt;.&lt;/p&gt;
    &lt;p&gt;
      The
      &lt;a href=&#34;http://www.eclipse.org/leshan/&#34; target=&#34;_blank&#34;&gt;Eclipse Leshan project&lt;/a&gt; provides a &lt;strong&gt;Java implementation&lt;/strong&gt; of LwM2M, allowing to build LwM2M servers and clients. The source code of Leshan is available from the
      &lt;a href=&#34;http://www.eclipse.org/leshan&#34;&gt;project webpage&lt;/a&gt;.&lt;/p&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; LWM2M Sandbox Server
    &lt;/h2&gt;
    &lt;p&gt;
      We provide a Leshan-based
      &lt;a href=&#34;sandbox.html#lwm2m&#34;&gt;LWM2M sandbox server&lt;/a&gt; against which LWM2M clients can be registered. The sandbox server provides a Web UI and a REST API to enable interaction with the registered clients.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>mqtt</title>
      <link>http://iot.eclipse.org/standards/mqtt/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>http://iot.eclipse.org/standards/mqtt/</guid>
      <description>&lt;p&gt;
  &lt;strong&gt;MQTT&lt;/strong&gt; is a
  &lt;a href=&#34;http://www.ibm.com/developerworks/webservices/library/ws-mqtt/index.html&#34; target=&#34;_blank&#34;&gt;protocol designed&lt;/a&gt; to connect the physical world devices and networks, with applications and middleware used in IT and Web development, making it an ideal connectivity protocol for IoT and M2M.
&lt;/p&gt;
&lt;p&gt;It is a lightweight publish-subscribe protocol that runs on embedded devices and mobile platforms, while connecting to highly scalable enterprise and web servers over wired and wireless networks. It is useful for connections with remote embedded systems where a small code footprint is required and/or network bandwidth is at a premium or connectivity unpredictable, and, for mobile applications that require small size, low power usage, minimised data packets, and efficient distribution of information to one or many receivers.&lt;/p&gt;
&lt;p&gt;With loose coupling and quality-of-service, MQTT is optimized for dynamic system environments where high volumes of physical world messages and events need to be made available to Web and enterprise servers, and other consumers. MQTT has been well positioned for even the unanticipated requirements of M2M and IoT applications.&lt;/p&gt;
&lt;h2&gt;
  &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Getting started with MQTT
&lt;/h2&gt;
&lt;p&gt;
  The
  &lt;a href=&#34;https://eclipse.org/paho&#34; target=&#34;_blank&#34;&gt;Eclipse Paho projec&lt;/a&gt;t is based around MQTT client runtimes that implement the MQTT messaging protocol. The client runtimes can be configured to run against a broker running on your server, or the sandbox MQTT server described below. There are
  &lt;a href=&#34;http://wiki.eclipse.org/Paho#Quick_Start_Guides&#34; target=&#34;_blank&#34;&gt;Quick Start Guides&lt;/a&gt; available to get started. This article
  &lt;a href=&#34;http://www.infoq.com/articles/practical-mqtt-with-paho&#34;&gt;Practical MQTT with Eclipse Paho&lt;/a&gt; is also a good introduction to MQTT.
&lt;/p&gt;
&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Download MQTT runtimes
    &lt;/h2&gt;
    &lt;p&gt;
      Source code for our MQTT client libraries is available in multiple languages at the
      &lt;a href=&#34;http://www.eclipse.org/paho/&#34; target=&#34;_blank&#34;&gt;Paho project&lt;/a&gt; page.
    &lt;/p&gt;
    &lt;p&gt;Source code for our MQTT server library is available from the
      &lt;a href=&#34;http://www.eclipse.org/mosquitto&#34;&gt;Mosquitto&lt;/a&gt; project.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; MQTT Sandbox Server
    &lt;/h2&gt;
    &lt;p&gt;
      We provide a
      &lt;a href=&#34;sandbox.html#mqtt&#34;&gt;sandbox server&lt;/a&gt; so that you can test your MQTT-based applications against an actual MQTT broker.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ogc-sensorthings-api</title>
      <link>http://iot.eclipse.org/standards/ogc-sensorthings-api/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>http://iot.eclipse.org/standards/ogc-sensorthings-api/</guid>
      <description>&lt;p&gt;
  &lt;strong&gt;SensorThings API&lt;/strong&gt; is an Open Geospatial Consortium (OGC) standard providing an open and unified framework to interconnect IoT sensing devices, data, and applications over the Web. It is an open standard addressing the syntactic interoperability and semantic interoperability of the Internet of Things.
&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Download a SensorThings API runtime
    &lt;/h2&gt;
    &lt;p&gt;
      The
      &lt;a href=&#34;http://www.eclipse.org/whiskers/&#34; target=&#34;_blank&#34;&gt;Eclipse Whiskers project&lt;/a&gt; provides a JavaScript client and a light-weight server for IoT gateways. The source code of Whiskers is available on the project&#39;s
      &lt;a href=&#34;https://www.github.com/eclipse/whiskers&#34;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
  &lt;/p&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>onem2m</title>
      <link>http://iot.eclipse.org/standards/onem2m/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>http://iot.eclipse.org/standards/onem2m/</guid>
      <description>&lt;p&gt;&lt;strong&gt;oneM2M&lt;/strong&gt; specifications provide a horizontal framework to support a wide range of applications and services such as smart cities, smart grid, connected car, home automation, public safety, and health.&lt;/p&gt;
&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Download a oneM2M stack
    &lt;/h2&gt;
    &lt;p&gt;The
      &lt;a href=&#34;http://www.eclipse.org/om2m/&#34; target=&#34;_blank&#34;&gt;Eclipse OM2M project&lt;/a&gt; provides a Java implementation of the ETSI oneM2M. It provides a horizontal M2M service platform for developing services independently of the underlying network, with the aim to facilitate the deployment of vertical applications on heterogeneous devices. The source code of OM2M is available from the
      &lt;a href=&#34;http://www.eclipse.org/om2m&#34;&gt;project webpage&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>opc-ua</title>
      <link>http://iot.eclipse.org/standards/opc-ua/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>http://iot.eclipse.org/standards/opc-ua/</guid>
      <description>&lt;p&gt;
  &lt;strong&gt;OPC Unified Architecture (UA)&lt;/strong&gt; is an interoperability standard that enables the secure and reliable exchange of industrial automation data while remaining cross-platform and vendor neutral. The specification is developed and maintained by the OPC Foundation with the guidance of individual software developers, industry vendors, and end-users. It defines the interface between Clients and Servers, including access to real-time data, monitoring of alarms and events, historical data access, and data modeling.
&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Download an OPC-UA runtime
    &lt;/h2&gt;
    &lt;p&gt;
      The
      &lt;a href=&#34;http://www.eclipse.org/milo/&#34; target=&#34;_blank&#34;&gt;Eclipse Milo project&lt;/a&gt; provides all the tools necessary to implement OPC UA client and/or server functionality in any Java-based project.&lt;/p&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; OPC-UA Sandbox Server
    &lt;/h2&gt;
    &lt;p&gt;
      &lt;em&gt;Coming soon.&lt;/em&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ppmp</title>
      <link>http://iot.eclipse.org/standards/ppmp/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>http://iot.eclipse.org/standards/ppmp/</guid>
      <description>&lt;p&gt;
  &lt;strong&gt;PPMP&lt;/strong&gt; (Production Performance Management Protocol) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.
&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
    &lt;h2&gt;
      &lt;i class=&#34;icon-forward&#34;&gt;&lt;/i&gt; Download a PPMP runtime
    &lt;/h2&gt;
    &lt;p&gt;
      The
      &lt;a href=&#34;http://www.eclipse.org/unide/&#34; target=&#34;_blank&#34;&gt;Eclipse Unide project&lt;/a&gt; publishes the current version of PPMP and develops simple server/client implementations. The source code of Unide is available on the project&#39;s
      &lt;a href=&#34;https://www.github.com/eclipse/unide&#34;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
  &lt;/p&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>