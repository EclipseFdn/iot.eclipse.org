<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Standards on Eclipse IoT</title>
    <link>https://iot.eclipse.org/standards/</link>
    <description>Recent content in Standards on Eclipse IoT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Nov 2016 17:57:25 +0100</lastBuildDate>
    
	<atom:link href="https://iot.eclipse.org/standards/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>coap</title>
      <link>https://iot.eclipse.org/standards/coap/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>https://iot.eclipse.org/standards/coap/</guid>
      <description>CoAP (Constrained Application Protocol) is a protocol specialized for use with constrained nodes and networks.
It implements the REST architectural style, it can be transparently mapped to HTTP. However, CoAP also provides features that go beyond HTTP such as native push notifications and group communication.
  Download a CoAP runtime   The Eclipse Californium project provides a Java implementation of the CoAP protocol, including support for the DTLS security layer.</description>
    </item>
    
    <item>
      <title>dtls</title>
      <link>https://iot.eclipse.org/standards/dtls/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>https://iot.eclipse.org/standards/dtls/</guid>
      <description>The Datagram Transport Layer Security (DTLS) protocol provides communications security for datagram protocols such as. DTLS allows datagram-based applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. For IoT applications, DTLS can be used to secure CoAP-based communications.   Download a DTLS implementation  The Eclipse tinydtls project provides a light-weight implementation of the DTLS protocol that can be used in devices with tight memory constraints, i.</description>
    </item>
    
    <item>
      <title>iec-61499</title>
      <link>https://iot.eclipse.org/standards/iec-61499/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>https://iot.eclipse.org/standards/iec-61499/</guid>
      <description>The international standard IEC 61499, addressing the topic of function blocks for industrial process measurement and control system. The specification of IEC 61499 defines a generic model for distributed control systems and is based on the IEC 61131 standard.   Download an IEC-61499 toolset and runtime  The Eclipse 4DIAC project provides an industrial-grade open source infrastructure for distributed Industrial Process Measurement and Control Systems (IPMCS) based on the IEC 61499 standard.</description>
    </item>
    
    <item>
      <title>lwm2m</title>
      <link>https://iot.eclipse.org/standards/lwm2m/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>https://iot.eclipse.org/standards/lwm2m/</guid>
      <description>OMA LightweightM2M (LWM2M) is an industry standard for device management of M2M/IoT devices. It heavily relies on CoAP and therefore is optimized for communications over sensor or cellular networks.  OMA LWM2M provides an extensible object model that allows to enable application data exchanges in addition to the core device management features (firmware upgrade, connectivity monitoring, &amp;hellip;)   Download a LWM2M runtime   The Eclipse Wakaama project provides a C portable framework for building LWM2M clients and/or servers.</description>
    </item>
    
    <item>
      <title>mqtt</title>
      <link>https://iot.eclipse.org/standards/mqtt/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>https://iot.eclipse.org/standards/mqtt/</guid>
      <description>MQTT is a protocol designed to connect the physical world devices and networks, with applications and middleware used in IT and Web development, making it an ideal connectivity protocol for IoT and M2M. It is a lightweight publish-subscribe protocol that runs on embedded devices and mobile platforms, while connecting to highly scalable enterprise and web servers over wired and wireless networks. It is useful for connections with remote embedded systems where a small code footprint is required and/or network bandwidth is at a premium or connectivity unpredictable, and, for mobile applications that require small size, low power usage, minimised data packets, and efficient distribution of information to one or many receivers.</description>
    </item>
    
    <item>
      <title>ogc-sensorthings-api</title>
      <link>https://iot.eclipse.org/standards/ogc-sensorthings-api/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>https://iot.eclipse.org/standards/ogc-sensorthings-api/</guid>
      <description>SensorThings API is an Open Geospatial Consortium (OGC) standard providing an open and unified framework to interconnect IoT sensing devices, data, and applications over the Web. It is an open standard addressing the syntactic interoperability and semantic interoperability of the Internet of Things.   Download a SensorThings API runtime   The Eclipse Whiskers project provides a JavaScript client and a light-weight server for IoT gateways. The source code of Whiskers is available on the project&#39;s Github repository.</description>
    </item>
    
    <item>
      <title>onem2m</title>
      <link>https://iot.eclipse.org/standards/onem2m/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>https://iot.eclipse.org/standards/onem2m/</guid>
      <description>oneM2M specifications provide a horizontal framework to support a wide range of applications and services such as smart cities, smart grid, connected car, home automation, public safety, and health.
  Download a oneM2M stack  The Eclipse OM2M project provides a Java implementation of the ETSI oneM2M. It provides a horizontal M2M service platform for developing services independently of the underlying network, with the aim to facilitate the deployment of vertical applications on heterogeneous devices.</description>
    </item>
    
    <item>
      <title>opc-ua</title>
      <link>https://iot.eclipse.org/standards/opc-ua/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>https://iot.eclipse.org/standards/opc-ua/</guid>
      <description>OPC Unified Architecture (UA) is an interoperability standard that enables the secure and reliable exchange of industrial automation data while remaining cross-platform and vendor neutral. The specification is developed and maintained by the OPC Foundation with the guidance of individual software developers, industry vendors, and end-users. It defines the interface between Clients and Servers, including access to real-time data, monitoring of alarms and events, historical data access, and data modeling.</description>
    </item>
    
    <item>
      <title>ppmp</title>
      <link>https://iot.eclipse.org/standards/ppmp/</link>
      <pubDate>Thu, 10 Nov 2016 17:57:25 +0100</pubDate>
      
      <guid>https://iot.eclipse.org/standards/ppmp/</guid>
      <description>PPMP (Production Performance Management Protocol) specifies a format that allows to capture data that is required to do performance analysis of production facilities. It allows monitoring backends to collect and evaluate key metrics of machines in the context of a production process. It is doing that by allowing to relate the machine status with currently produced parts.   Download a PPMP runtime   The Eclipse Unide project publishes the current version of PPMP and develops simple server/client implementations.</description>
    </item>
    
  </channel>
</rss>