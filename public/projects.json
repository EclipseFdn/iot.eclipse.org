{"rt.ecf":{"name":"Eclipse Communication Framework","id":"rt.ecf","description":"\u003Cp\u003E\u003Ca href=\u0022http:\/\/www.eclipse.org\/ecf\u0022\u003EECF\u003C\/a\u003E provides frameworks for messaging and communications. We fully implement the \u003Ca href=\u0022https:\/\/wiki.eclipse.org\/ECF#OSGi_Remote_Services\u0022\u003EOSGi Remote Services\u003C\/a\u003E\u0026nbsp;(RS) and Remote Service Admin (RSA) specifications.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/rt.ecf","logo":"https:\/\/projects.eclipse.org\/sites\/default\/files\/logo128x37.png","website":"http:\/\/www.eclipse.org\/ecf","state":"Regular","provisioned":true},"iot.paho":{"name":"Paho","id":"iot.paho","description":"\u003Cp\u003EThe Paho project provides reliable open-source implementations of open and standard messaging protocols aimed at new, existing, and emerging applications for Machine-to-Machine (M2M) and Internet of Things (IoT).\u003C\/p\u003E\r\n\u003Cp\u003EPaho reflects the inherent physical and cost constraints of device connectivity. Its objectives include effective levels of decoupling between devices and applications, designed to keep markets open and encourage the rapid growth of scalable Web and Enterprise middleware and applications. Paho contains \u003Ca href=\u0022http:\/\/mqtt.org\u0022\u003EMQTT\u003C\/a\u003E publish\/subscribe client implementations for use on embedded platforms, along with corresponding server support as determined by the community.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/technology.paho","logo":"https:\/\/projects.eclipse.org\/sites\/default\/files\/paho-logo-200.png","website":"http:\/\/www.eclipse.org\/paho\/","state":"Regular","provisioned":true},"tools.sequoyah.mtj":{"name":"Mobile Tools for Java\u2122","id":"tools.sequoyah.mtj","description":"\u003Cp\u003E\u003Cspan\u003EMobile Tools for Java\u0026trade; project creates tools and frameworks to extend Eclipse platform to support embedded and mobile device Java application development.\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\r\n\u003Ch4\u003E\r\n\tNews\u003C\/h4\u003E\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\r\n\t\tSeptember 15, 2015,\u0026nbsp;\u003Cstrong\u003EMobile Tools for Java\u0026trade;\u0026nbsp;2.0.1 is released.\u003C\/strong\u003E\u003Cbr \/\u003E\r\n\t\t\u003Cbr \/\u003E\r\n\t\t\u003Cdiv\u003E\r\n\t\t\tMobile Tools for Java\u0026trade; (MTJ) 2.0.1 release is focused on bug fixes and support of latest Eclipse Mars.\u003C\/div\u003E\r\n\t\t\u003Cdiv\u003E\r\n\t\t\tThe scope of MTJ 2.0.1 is listed below:\u003C\/div\u003E\r\n\t\t\u003Cul\u003E\r\n\t\t\t\u003Cli\u003E\r\n\t\t\t\tMigration to Eclipse Mars\u003C\/li\u003E\r\n\t\t\t\u003Cli\u003E\r\n\t\t\t\tBetter Javadocs detections for libraries that represent the same logical API but correspond to different API versions\u003C\/li\u003E\r\n\t\t\t\u003Cli\u003E\r\n\t\t\t\tBug fixes\u003C\/li\u003E\r\n\t\t\u003C\/ul\u003E\r\n\t\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\tNovember 14, 2014,\u0026nbsp;\u003Cstrong\u003E\u003Cspan\u003EMobile Tools for Java\u0026trade;\u0026nbsp;2.0 is released.\u003C\/span\u003E\u003C\/strong\u003E\u003Cbr \/\u003E\r\n\t\t\u003Cdiv\u003E\r\n\t\t\t\u003Cp\u003E\u003Cspan\u003EMobile Tools for Java\u0026trade; (MTJ) 2.0 release is making MTJ plugin IoT ready by supporting Java\u0026trade; ME 8 platform. Java\u0026trade; ME 8 is the major update of the Java\u0026trade; ME technology as a modern embedded software platform, purpose-built as a foundation for new services in the Internet of Things (IoT). MTJ 2.0 is based on Eclipse Luna and provides a support for CLDC 1.8 configuration (\u003Ca href=\u0022https:\/\/jcp.org\/en\/jsr\/detail?id=360\u0022\u003EJSR 360\u003C\/a\u003E), MEEP 8.0 profile (\u003Ca href=\u0022https:\/\/jcp.org\/en\/jsr\/detail?id=361\u0022\u003EJSR 361\u003C\/a\u003E) and better IMP-NG profile (\u003Ca href=\u0022https:\/\/jcp.org\/en\/jsr\/detail?id=228\u0022\u003EJSR 228\u003C\/a\u003E) support.\u003C\/span\u003E\u003C\/p\u003E\r\n\t\t\t\u003Cp\u003E\u003Cspan\u003EOther improvements in this release includes new extensible Code Validation Builder that provides an ability to perform pre-compilation analysis and generates warnings by 3rd party plugins created on top of MTJ, support for Java\u0026trade; ME APIs javadocs in zip archives and a lot of bug fixes.\u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E\r\n\t\t\u003C\/div\u003E\r\n\t\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/tools.sequoyah.mtj","logo":null,"website":"http:\/\/www.eclipse.org\/mtj\/","state":"Regular","provisioned":true},"iot.eclipsescada":{"name":"Eclipse SCADA","id":"iot.eclipsescada","description":"\u003Cp\u003ESCADA (supervisory control and data acquisition) is a type of industrial control system (ICS). Industrial control systems are computer controlled systems that monitor and control industrial processes that exist in the physical world. SCADA systems historically distinguish themselves from other ICS systems by being large scale processes that can include multiple sites, and large distances.\u003C\/p\u003E\r\n\u003Cp\u003ESimply speaking the primary target of Eclipse SCADA is a way to connect different industrial devices to a common communication system and post-process as well as visualize the data to operating personnel.\u003C\/p\u003E\r\n\u003Cp\u003ESince this scheme will also work with non-industrial devices and devices do become more complex and tend to become software solutions themselves the term \u0026ldquo;device\u0026rdquo; should be more considered as an \u0026ldquo;other system\u0026rdquo;.\u003C\/p\u003E\r\n\u003Cp\u003EThe idea of a SCADA system is to provide mostly scalar values instead of complex data structures. Where necessary data structures are split up into multiple scalar values. This is done in order to process the data more quickly and allow common processing of data.\u003C\/p\u003E\r\n\u003Cp\u003EFor example a meteo station is providing current weather information. It can provide temperature and solar radiation. These are two floating point values which are processed independently. Still the same alarming schema (high level alarm) can be applied to both values. The values can both be assigned a quality\/alarm information (alarm state) which can then be shown using the same user interface element and the same visualization scheme (alarm is displayed with red background). This way many different scalar values can be processed exactly the same way.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/technology.eclipsescada","logo":"https:\/\/projects.eclipse.org\/sites\/default\/files\/LOGO_eclipseSCADA_140210_72.png","website":"http:\/\/www.eclipse.org\/eclipsescada\/","state":"Incubating","provisioned":true},"iot.ponte":{"name":"Ponte","id":"iot.ponte","description":"\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0, 0, 0); font-family: Arial, sans-serif; line-height: 16px;\u0022\u003EPonte provides reusable solutions for bridging M2M protocols. \u0026nbsp;\u003C\/span\u003E\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/technology.ponte","logo":"https:\/\/projects.eclipse.org\/sites\/default\/files\/logo-banner-white.png","website":"http:\/\/eclipse.org\/ponte","state":"Incubating","provisioned":true},"iot.concierge":{"name":"Concierge","id":"iot.concierge","description":"\u003Cp\u003EConcierge is a small-footprint implementation of the OSGi Core Specifications R5 standard optimized for mobile and embedded devices.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/rt.concierge","logo":null,"website":null,"state":"Incubating","provisioned":true},"iot.mosquitto":{"name":"Mosquitto","id":"iot.mosquitto","description":"\u003Cp\u003EMosquitto provides a lightweight server implementation of the MQTT and MQTT-SN protocols, written in C. The reason for writing it in C is to enable the server to run on machines which do not even have capacity for running a JVM. Sensors and actuators, which are often the sources and destinations of MQTT and MQTT-SN messages, can be very small and lacking in power. This also applies to the embedded machines to which they are connected, which is where Mosquitto could be run.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/technology.mosquitto","logo":null,"website":"http:\/\/eclipse.org\/mosquitto","state":"Incubating","provisioned":true},"iot.smarthome":{"name":"Eclipse SmartHome","id":"iot.smarthome","description":"\u003Cp\u003EThe Eclipse SmartHome project is a framework that allows building smart home solutions that have a strong focus on heterogeneous environments, i.e. solutions that deal with the integration of different protocols or standards. Its purpose is to provide a uniform access to devices and information and to facilitate different kinds of interactions with them. This framework consists out of a set of OSGi bundles that can be deployed on an OSGi runtime and which defines OSGi services as extension points.\u003C\/p\u003E\r\n\u003Cp\u003EThe stack is meant to be usable on any kind of system that can run an OSGi stack - be it a multi-core server, a residential gateway or a Raspberry Pi.\u003C\/p\u003E\r\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/technology.smarthome","logo":"https:\/\/projects.eclipse.org\/sites\/default\/files\/Bildschirmfoto%202014-04-10%20um%2016.04.26.png","website":"https:\/\/www.eclipse.org\/smarthome\/","state":"Incubating","provisioned":true},"iot.kura":{"name":"Kura","id":"iot.kura","description":"\u003Cp\u003EKura offers a Java\/OSGi-based container for M2M applications running in service gateways. Kura provides or, when available, aggregates open source implementations for the most common services needed by M2M applications. Kura components are designed as configurable OSGi Declarative Service exposing service API and raising events. While several Kura components are in pure Java, others are invoked through JNI and have a dependency on the Linux operating system.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/technology.kura","logo":"https:\/\/projects.eclipse.org\/sites\/default\/files\/kura_logo_small.png","website":"https:\/\/www.eclipse.org\/kura\/","state":"Regular","provisioned":true},"iot.krikkit":{"name":"Krikkit","id":"iot.krikkit","description":"\u003Cp\u003EThe Krikkit architecture is a publish\/subscribe mechanism where rules\/policies are registered on edge routers\/gateways that have visibility into and communicate with sensors.\u0026nbsp;\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/technology.krikkit","logo":null,"website":null,"state":"Incubating","provisioned":true},"iot.om2m":{"name":"OM2M","id":"iot.om2m","description":"\u003Cp\u003EThe OM2M project is an open source implementation of the ETSI M2M standard. It provides a framework for developing services independently of the underlying network and aims to facilitate deployment of vertical applications and heterogeneous devices.\u0026nbsp;\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/technology.om2m","logo":"https:\/\/projects.eclipse.org\/sites\/default\/files\/OM2M_logo.png","website":"http:\/\/www.eclipse.org\/om2m","state":"Incubating","provisioned":true},"iot.californium":{"name":"Californium (Cf) CoAP Framework","id":"iot.californium","description":"\u003Cp\u003ECalifornium (Cf) is an open source implementation of the Constrained Application Protocol (CoAP). It is written in Java and targets unconstrained environments such as back-end service infrastructures (e.g., proxies, resource directories, or cloud services) and less constrained environments such as embedded devices running Linux (e.g., smart home\/factory controllers or cellular gateways).\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/technology.californium","logo":"https:\/\/projects.eclipse.org\/sites\/default\/files\/Cf_128.png","website":"https:\/\/www.eclipse.org\/californium\/","state":"Regular","provisioned":true},"iot.wakaama":{"name":"Wakaama","id":"iot.wakaama","description":"\u003Cp\u003EWakaama provides APIs for a server application to send commands to registered LWM2M Clients. On client applications, Wakaama checks received commands for syntax and access rights and then dispatches them to the relevant objects.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/technology.wakaama","logo":null,"website":null,"state":"Incubating","provisioned":true},"tools.titan":{"name":"Eclipse Titan","id":"tools.titan","description":"\u003Cp\u003E\u003Cspan style=\u0022font-family: arial, helvetica, sans-serif; font-size: 14px;\u0022\u003ETitan is a TTCN-3 compilation and execution environment with an \u0026nbsp;Eclipse-based IDE.\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\u0022font-family: arial, helvetica, sans-serif; font-size: 14px;\u0022\u003EThe user of the tool can develop test cases, test execution logic and build the executable test suite for several platforms.\u003C\/span\u003E\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/tools.titan","logo":"https:\/\/projects.eclipse.org\/sites\/default\/files\/Symbol_200.png","website":null,"state":"Incubating","provisioned":true},"iot.paho.incubator":{"name":"Paho Incubator","id":"iot.paho.incubator","description":"\u003Cp\u003EA permanent incubator for Paho.\u003C\/p\u003E\r\n\u003Cp\u003EA permanent incubator is a project that is intended to perpetually remain in the\u0026nbsp;\u003Ca href=\u0022https:\/\/www.eclipse.org\/projects\/dev_process\/development_process.php#6_2_3_Incubation\u0022\u003Eincubation\u003C\/a\u003E\u0026nbsp;phase. Permanent incubators are an excellent place to innovate, test new ideas, grow functionality that may one day be moved into another project, and develop new committers.\u003C\/p\u003E\r\n\u003Cp\u003EPermanent incubator projects never have releases; they cannot participate in the annual simultaneous release. Permanent incubators may have builds, and downloads. They conform to the standard incubation branding requirements and are subject to the IP due diligence rules outlined for incubating projects. Permanent incubators do not graduate.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/iot.paho.incubator","logo":null,"website":null,"state":"Incubating","provisioned":true},"iot.vorto":{"name":"Vorto","id":"iot.vorto","description":"\u003Cp\u003EThe Vorto project comprises of the meta information model, the tool set to create information models, the code generators and the repository to manage existing information models. The meta information model and also the tool set are based on the Eclipse EMF (Eclipse Modeling Framework) framework. \u003Cspan\u003EEMF is a modeling framework and code generation facility for building tools and other applications based on a structured data model.\u003C\/span\u003E For more details regarding EMF, please refer to the \u003Ca class=\u0022external-link\u0022 href=\u0022http:\/\/www.eclipse.org\/modeling\/emf\/\u0022 rel=\u0022nofollow\u0022\u003EEclipse Modeling Framework Project\u003C\/a\u003E page. The tool set is realized as an Eclipse plug-in and thus can be integrated into any supported Eclipse platform.\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cu\u003EMeta Information Model\u003C\/u\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EWhile information models represent the capabilities of a particular type of device in its entirety, the meta model describes how the information models are structured. Since the overall target of this project is to push standardization of information models it is very important to have a sustainable and flexible meta model which can be used as a basis of the described standardization. In particular this means that the meta model must be compatible to meta models defined for example by EEBus, ETSI and oneM2M. It is also required that the meta model is compatible with the Smart Home Device Template (SDT) which has been specified by HGi and is currently discussed with BBF, ETSI and the OSGi Alliance.\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EFunction blocks describe the capabilities of a device, exposing properties, operations and events. The function blocks which are essential parts of information models can be re-used for describing arbitrary types of devices sharing the same functionalities. The meta model is technically based on the Eclipse EMF framework\u0026nbsp;which allows the use of other Eclipse components based on EMF, such as \u003Ca href=\u0022http:\/\/www.eclipse.org\/sirius\/\u0022\u003EEclipse Sirius\u003C\/a\u003E for graphical modelers or template engines for code generations such as JET or XPand. \u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EThe IoT tool set textual editor itself uses the \u003Ca href=\u0022http:\/\/www.eclipse.org\/Xtext\/\u0022\u003EEclipse Xtext Framework\u003C\/a\u003E to parse the textual information model representation and convert it to an Information EMF Model. The information model code generators can then further process these EMF models.\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003E\u003Cu\u003ECode Generators\u003C\/u\u003E\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EThe code generators allow application developers to comfortably include the described concepts into their applications. For example one code generator allows generating information model based parts of an access layer for Eclipse Smart Home and another generator allows doing this for openHAB or OSGi-DAL. Other examples could be EEBus, ETSI or oneM2M specific implementation parts. An openHAB\u0026nbsp;generator for example would map an information model to items with command types, which is the basis of the openHAB representation for a thing in the IoT world.\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EThe described tool set provides an extension point to include new code generators without major effort. This enables the usage of the information model concept in various environments and device ecosystems. The code generators concept is very general which means that there are no constraints regarding the implementations.\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EAs mentioned before the device information model is based on EMF which empowers code generators to generate logic written in any language, for example\u0026nbsp;XML, JSON, Lua, Java or C\/C++. It leverages template engines such as Java Emitter Templates (JET) or XPand.\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003E\u003Cu\u003EIoT Tool Set\u003C\/u\u003E\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EThe tool provides two options for creating information models based on the described meta-model:\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EThe first possibility is to do this using a graphical environment that allows doing most of the steps using drag-and-drop mechanisms. This option targets at the group of business users that have no or only a small background regarding programming skills. The created information models can be validated and it is also possible to use the code generators for the creation of solutions.\u003C\/span\u003E\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EThe second possibility is to use a domain specific language (DSL) that has been designed for comfortably creating the information models. The corresponding editors allow syntax highlighting and auto completion. This option targets at the group of developers that have an IT background and are experienced in using programming and scripting languages.\u003C\/span\u003E\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EIn addition, the tool set shall allow for importing existing information models which are for example conform to ETSI, oneM2M or EEBus.\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EThe planned initial features of the tool set include:\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EInformation Model Language Editor\u003Cstrong\u003E:\u0026nbsp;\u003C\/strong\u003EA simple way to describe information models in a declarative way using auto-completion, syntax highlighting, content assistance and model validation. The declarative model is internally converted into an EMF model.\u003C\/span\u003E\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EEclipse Project Wizard\u003Cstrong\u003E:\u003C\/strong\u003E\u0026nbsp;Easily create an information model project using an Eclipse Project Wizard.\u0026nbsp;\u003C\/span\u003E\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003E\u003Cu\u003EThe Information Model Repository\u003C\/u\u003E\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EThe information model repository is a server based technology which shall be used as the centralized storage location for information models. During development time the repository allows developers accessing the standardized information models for integrating them into applications (e.g. by using the above described code generators).\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EIt is comprised of:\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cspan style=\u0022line-height: 1.42857;color: rgb(0,0,0);\u0022\u003EResource and version management using e.g. Git or CDO.\u003C\/span\u003E\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cspan style=\u0022line-height: 1.42857;color: rgb(0,0,0);\u0022\u003EQuery layer to query information models by different search criteria.\u003C\/span\u003E\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cspan style=\u0022line-height: 1.42857;color: rgb(0,0,0);\u0022\u003EDependency management of information models.\u003C\/span\u003E\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cspan style=\u0022line-height: 1.42857;color: rgb(0,0,0);\u0022\u003EWeb browser interface.\u003C\/span\u003E\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cspan style=\u0022line-height: 1.42857;color: rgb(0,0,0);\u0022\u003EIDE Integration.\u003C\/span\u003E\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EWhen version 1.0 of the repository is released it shall be hosted by the Eclipse Foundation to initialize the standardization process.\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003E\u003Cu\u003EExample\u003C\/u\u003E\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003ELet\u0026#39;s assume Vendor A creates a new Z-Wave smoke detector which can measure the temperature, return the battery status and also fire an alarm event in case of fire. Using the IoT tool set, vendor A creates a corresponding information model which describes the three functionalities. After creating the information model vendor A publishes the model to the Information Model Repository. Now user B who bought such a smoke detector wants to include it into his openHAB environment. Using the IoT tool set he can browse the repository to find the information model created by Vendor A. After downloading it he could create the openHAB representation of the device using a specific code generator. In a last step he would complete this representation by adding required Z-Wave configurations.\u003C\/span\u003E\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cspan style=\u0022color: rgb(0,0,0);\u0022\u003EIn another scenario user C wants to access the smoke detector using an OSGi device abstraction layer. He also downloads the information model using the IoT tool set and creates an implementation skeleton using another OSGi specific code generator. Within the created skeleton he would then add his specific code.\u003C\/span\u003E\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/iot.vorto","logo":null,"website":"http:\/\/www.eclipse.org\/vorto","state":"Incubating","provisioned":true},"iot.leshan":{"name":"Leshan","id":"iot.leshan","description":"\u003Cp\u003ELeshan is an OMA Lightweight M2M (LWM2M) implementation in Java.\u003C\/p\u003E\r\n\u003C!--break--\u003E\r\n\u003Cp\u003EEclipse Leshan relies on the \u003Ca href=\u0022https:\/\/projects.eclipse.org\/projects\/iot.californium\u0022 target=\u0022_blank\u0022\u003EEclipse IoT Californium\u003C\/a\u003E project for the CoAP and DTLS implementation. It is tested against the LWM2M C client provided by the \u003Ca href=\u0022https:\/\/projects.eclipse.org\/projects\/iot.wakaama\u0022 target=\u0022_blank\u0022\u003EEclipse IoT Wakaama\u003C\/a\u003E project.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/iot.leshan","logo":null,"website":null,"state":"Incubating","provisioned":true},"iot.ignite":{"name":"Ignite|IoT","id":"iot.ignite","description":"\u003Cp\u003EThe Ignite|IoT methodology has two main perspectives:\u003C\/p\u003E\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\r\n\t\tIoT Strategy Execution: This perspective looks at IoT strategy from an enterprise perspective, including IoT strategy definition, IoT opportunity identification, IoT business case and IoT programme management.\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\tIoT Solution Delivery: This perspective looks at the individual IoT solution and the related project. Note that it defines the interfaces to the related asset and its organization, but usually excludes design and manufacturing of the asset itself.\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp\u003E\u003Cimg alt=\u0022Overview of Ignite Solution Delivery\u0022 src=\u0022http:\/\/ignite-iot.org\/wp-content\/uploads\/2014\/11\/Ignite-Solution-Delivery.png\u0022 style=\u0022width: 500px; height: 335px;\u0022 \/\u003E\u003C\/p\u003E\r\n\u003Cp\u003EThe Ignite|IoT solution delivery perspective is currently the more detailed one and can be broken down as follows:\u003C\/p\u003E\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\r\n\t\tIoT Solution Lifecycle: This perspective focuses on planning, building and running IoT solutions.\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\tIoT Building Blocks: This perspective contains re-usable artifacts from successful projects, including Project Dimensions, Architecture Blueprints and Technology Profiles.\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\tIoT Project DB: This is a database of reference projects that have been analyzed in order to extract best practices for the IoT building blocks and the Solution Lifecycle Perspective.\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp\u003EThe IoT Solution Lifecycle contains the following elements:\u003C\/p\u003E\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\r\n\t\tInitial Project Design: This design blueprint builds on the elements defined as part of the generic IoT Building Blocks, including project self-assessment using Project Dimensions, solution architecture leveraging Architecture Blueprints and technology selection leveraging Technology Profiles.\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\tProject Work streams: This blueprint defined the top level Work streams typically found in an IoT solution project. A checklist for each Work stream is provided, plus a list of common dependencies between the Work steams.\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp\u003EThe IoT Building Blocks consist of the following elements:\u003C\/p\u003E\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\r\n\t\tProject Dimensions: This is a precursor of formal project requirements. Project dimensions are used for project self-assessment, project comparisons, architecture and technology selection, etc.\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\tArchitecture Blueprints: Building on existing architecture blueprints (e.g. Service Oriented Architecture), this adds new architectural perspectives required for IoT project and provides a superstructure to integrate the different required architectural perspectives.\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\tTechnology Profiles: Identifies and describes the most important technologies usually required for IoT projects. Leverages IoT architecture perspectives to describe where in the overall IoT architecture these different technologies fit in. Attempts to link back to project dimensions to support technology selection.\u003C\/li\u003E\r\n\u003C\/ul\u003E","url":"https:\/\/projects.eclipse.org\/projects\/iot.ignite","logo":null,"website":null,"state":"Incubating","provisioned":false},"iot.4diac":{"name":"4DIAC - Framework for Distributed Industrial Automation and Control","id":"iot.4diac","description":"\u003Cp\u003E4DIAC in its current form has been started 2007 as open source project fostering the further development of IEC 61499 for its use in distributed IPMCS and further distribute research results from the original contributors. From the beginning it provided everything necessary to program and execute distributed IPMCS.\u003C\/p\u003E\r\n\u003Cp\u003E4DIAC became one of the main sources for IEC 61499-based research and development (see for example the \u003Ca href=\u0022http:\/\/www.fordiac.org\/52.0.html\u0022\u003E4DIAC Users\u0026#39; Workshop\u003C\/a\u003E series). It has been successfully applied in a number of industrial systems, like \u003Ca href=\u0022http:\/\/www.fordiac.org\/30.0.html\u0022\u003Emanufacturing systems\u003C\/a\u003E, \u003Ca href=\u0022http:\/\/www.fordiac.org\/28.0.html\u0022\u003Elogistics\u003C\/a\u003E, \u003Ca href=\u0022http:\/\/www.fordiac.org\/48.0.html\u0022\u003Epower and energy applications\u003C\/a\u003E, \u003Ca href=\u0022http:\/\/www.fordiac.org\/31.0.html\u0022\u003Erobotics\u003C\/a\u003E, or building automation.\u003C\/p\u003E\r\n\u003Cp\u003EA screenshot of the 4DIAC-IDE is presented in the following figure:\u003C\/p\u003E\r\n\u003Cp\u003E\u003Cimg alt=\u00224DIAC overview\u0022 src=\u0022\/sites\/default\/files\/4diac.jpg\u0022 style=\u0022width: 480px; height: 333px;\u0022 \/\u003E\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/iot.4diac","logo":null,"website":"http:\/\/www.eclipse.org\/4diac","state":"Incubating","provisioned":true},"iot.risev2g":{"name":"RISE V2G","id":"iot.risev2g","description":"\u003Ch3\u003E\r\n\tAbout RISE V2G\u003C\/h3\u003E\r\n\u003Cdiv\u003E\r\n\tRISE V2G is a \u003Cstrong\u003ER\u003C\/strong\u003Eeference \u003Cstrong\u003EI\u003C\/strong\u003Emplementation \u003Cstrong\u003ES\u003C\/strong\u003Eupporting the \u003Cstrong\u003EE\u003C\/strong\u003Evolution of the \u003Cstrong\u003EV\u003C\/strong\u003Eehicle-\u003Cstrong\u003E2\u003C\/strong\u003E-\u003Cstrong\u003EG\u003C\/strong\u003Erid communication interface ISO\/IEC 15118.\u003C\/div\u003E\r\n\u003Cdiv\u003E\r\n\tThe international standard ISO\/IEC 15118, entitled \u0026quot;Road vehicles - Vehicle to grid communication interface\u0026quot;, defines a digital IP-based communication interface between an electric vehicle (EV) and a charging station (named Electric Vehicle Supply Equipment - EVSE). It allows for a user-friendly \u0026quot;plug-and-charge\u0026quot; mechanism for authentication, authorisation, billing, and flexible load control based on a wide set of information exchanged between the EV and EVSE.\u003C\/div\u003E\r\n\u003Cdiv\u003E\r\n\tA rise in the wide application of this standard is essential for reaching the goal of integrating EVs as flexible energy storage devices into a smart grid.\u003C\/div\u003E\r\n\u003Cdiv\u003E\r\n\t\u0026nbsp;\u003C\/div\u003E\r\n\u003C!--break--\u003E\r\n\u003Ch3\u003E\r\n\tMission Statement\u003C\/h3\u003E\r\n\u003Cp\u003EThe RISE V2G project shall serve as an open source standard-compliant reference implementation and documentation. As such, the objective is to provide a test platform for interoperability testing and to offer an information resource for interested parties. The adoption of a new technology heavily depends on the interoperability of its various implementations. The more tests conducted, the more stable and reliable the developed solution will be.\u003C\/p\u003E\r\n\u003Cp\u003EAs the ISO\/IEC 15118 consists of eight documment parts - with part 1 to 3 defining use cases and requirements for conductive charging, parts 4 and 5 dealing with conformance tests, and parts 6 to 8 specifying use cases and requirements for inductive charging - the RISE V2G project shall evolve to cover all aspects of conductive and inductive charging from the physical layer up to the application layer. However, it requires a lot of work to be done to fulfil this endeavor.\u003Cbr \/\u003E\r\n\tYour assistance would therefore be very appreciated, be it by testing this reference implementation against your own solution - this way uncovering possible bugs or making code optimisation suggestions - or by providing an implementation for yet missing parts.\u003C\/p\u003E\r\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\r\n\u003Ch3\u003E\r\n\tScope and current status\u003C\/h3\u003E\r\n\u003Cp\u003EAs this standard describes a client\/server-based protocol with the EV being the client and the EVSE being the server, this reference implementation covers both entities. The charging process can be authenticated and authorised via a so-called plug-and-charge mechanism (PnC) or via external identification means (EIM) such as an RFID card. Furthermore, there are several message sets defined for AC (alternating current) and DC (direct current) charging.\u003C\/p\u003E\r\n\u003Cp\u003EThis project covers all defined message sets and identification means.\u0026nbsp;It currently focuses on the implementation of part 2 (\u003Ca href=\u0022http:\/\/www.iso.org\/iso\/home\/store\/catalogue_tc\/catalogue_detail.htm?csnumber=55366\u0022 target=\u0022_blank\u0022\u003EISO\/IEC 15118-2\u003C\/a\u003E) of this standard defining the protocol requirements from the network up to the application layer (layer 3 to 7 of the ISO\/OSI layer model) for the conductive charging scenario.\u003C\/p\u003E\r\n\u003Cp\u003EThis version provides a full implementation of this part including cryptographic functionality to enable TLS communication and XML signatures. The only feature not implemented is the OCSP (Online Certificate Status Protocol). Further testing is required by third parties to assure the correct implementation of all requirements listed in ISO\/IEC 15118-2.\u003C\/p\u003E\r\n\u003Cdiv\u003E\r\n\tRISE V2G allows you to create an EVCC instance acting as the client sending request messages related to the chosen charging scenario as well as an SECC instance acting as the server which is responding to those requests. EVCC stands for Electric Vehicle Communication Controller (inside the EV) whereas SECC is short for Supply Equipment Communication Controller (inside the EVSE).\u003C\/div\u003E\r\n\u003Cdiv\u003E\r\n\t\u0026nbsp;\u003C\/div\u003E\r\n\u003Cdiv\u003E\r\n\tThe current status of the project consists of three subprojects which implement the conductive charging scenario:\u003C\/div\u003E\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\r\n\t\tthe EVCC project covering its state machine and request messages\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\tthe SECC project covering its state machine and response messages\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\ta shared project with common classes used by both entities\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\r\n\u003Ch3\u003E\r\n\tCredits\u003C\/h3\u003E\r\n\u003Cp\u003EThe code of the RISE V2G project has its origin in the research project\u0026nbsp;\u003Ca href=\u0022http:\/\/izeus.kit.edu\/\u0022 target=\u0022_blank\u0022\u003EiZEUS\u003C\/a\u003E, funded by the Federal Ministry for Economic Affairs and Energy and conducted at the Karlsruhe Institute of Technology, Germany.\u003Cbr \/\u003E\r\n\tThe first prototype of an\u0026nbsp;\u003Ca href=\u0022http:\/\/www.iso.org\/iso\/home\/store\/catalogue_tc\/catalogue_detail.htm?csnumber=55366\u0022 target=\u0022_blank\u0022\u003EISO\/IEC 15118-2\u003C\/a\u003E\u0026nbsp;implementation has been realised by the RISE V2G project lead within the course of that research project at the Institute of Applied Informatics and Formal Description Methods (AFIB). This prototype has since been reworked and further enhanced at \u003Ca href=\u0022http:\/\/www.chargepartner.com\/en\u0022 target=\u0022_blank\u0022\u003EChargepartner GmbH\u003C\/a\u003E, a software-as-a-service specialist in the e-mobility market.\u003C\/p\u003E\r\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\r\n\u003Ch3\u003E\r\n\tResources\u003C\/h3\u003E\r\n\u003Cp\u003EThe code is hosted on the \u003Ca href=\u0022https:\/\/github.com\/eclipse\/risev2g\u0022 target=\u0022_blank\u0022\u003EGitHub project website\u003C\/a\u003E.\u0026nbsp;\r\n\t\u003Cbr \/\u003E\r\n\tContribute any questions and suggestions to the \u003Ca href=\u0022https:\/\/dev.eclipse.org\/mailman\/listinfo\/risev2g-dev\u0022 target=\u0022_blank\u0022\u003Edevelopers\u0026#39; mailing list\u003C\/a\u003E.\u003Cbr \/\u003E\r\n\tJoin the \u003Ca href=\u0022http:\/\/www.eclipse.org\/forums\/eclipse.risev2g\u0022 target=\u0022_blank\u0022\u003Ecommunity forum\u003C\/a\u003E for any discussions.\u003Cbr \/\u003E\r\n\tView the \u003Ca href=\u0022https:\/\/wiki.eclipse.org\/RISE_V2G\u0022 target=\u0022_blank\u0022\u003Egetting started guide and further documentation\u003C\/a\u003E to get you up and running.\u003Cbr \/\u003E\r\n\tIf you encounter a bug, \u003Ca href=\u0022https:\/\/bugs.eclipse.org\/bugs\/enter_bug.cgi?product=Risev2g\u0022 target=\u0022_blank\u0022\u003Efile it in Bugzilla\u003C\/a\u003E.\u003C\/p\u003E\r\n\u003Cp\u003E\u0026nbsp;\u003C\/p\u003E\r\n\u003Cdiv\u003E\r\n\t\u0026nbsp;\u003C\/div\u003E","url":"https:\/\/projects.eclipse.org\/projects\/iot.risev2g","logo":null,"website":null,"state":"Incubating","provisioned":true},"iot.tinydtls":{"name":"tinydtls","id":"iot.tinydtls","description":"\u003Cp\u003Etinydtls is a library for Datagram Transport Layer Security (DTLS) covering both the client and the server state machine. It is implemented in C and provides support for the mandatory cipher suites specified in \u003Ca href=\u0022https:\/\/tools.ietf.org\/html\/rfc7252\u0022\u003ECoAP\u003C\/a\u003E.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/iot.tinydtls","logo":null,"website":null,"state":"Incubating","provisioned":false},"iot.tiaki":{"name":"Tiaki","id":"iot.tiaki","description":"\u003Cp\u003EThe Tiaki library provides Secure Service Discovery features in a command-line interface and SDK for Java (C is coming soon - stay tuned!).\u003C\/p\u003E\r\n\u003Cp\u003EThe library provides ways to perform the following actions:\u003C\/p\u003E\r\n\u003Cul\u003E\r\n\t\u003Cli\u003E\r\n\t\tlist the available service types from a domain name\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\tlist the available service instances for a given type and domain name\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\tvalidate the integrity and authenticity of the data using DNSSEC\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp\u003ETiaki\u0026#39;s Secure Service Discovery implementation is based on the IETF DNS-SD (\u003Ca href=\u0022https:\/\/tools.ietf.org\/html\/rfc6763\u0022 target=\u0022_blank\u0022\u003ERFC 6763\u003C\/a\u003E) and the IETF DNSSEC (RFCs\u0026nbsp;\u003Ca href=\u0022https:\/\/tools.ietf.org\/html\/rfc4033\u0022 target=\u0022_blank\u0022\u003E4033\u003C\/a\u003E,\u0026nbsp;\u003Ca href=\u0022https:\/\/tools.ietf.org\/html\/rfc4034\u0022 target=\u0022_blank\u0022\u003E4034\u003C\/a\u003E, and\u0026nbsp;\u003Ca href=\u0022https:\/\/tools.ietf.org\/html\/rfc4035\u0022 target=\u0022_blank\u0022\u003E4035\u003C\/a\u003E).\u003C\/p\u003E\r\n\u003Cdiv\u003E\r\n\tThe library performs the necessary DNS lookups and DNSSEC validation to ensure both the authenticity and integrity of the records.\u003C\/div\u003E\r\n\u003Cp\u003EIt is available as a Java SDK or a command-line tool.\u0026nbsp;\u003C\/p\u003E\r\n\u003Cp\u003ETiaki stands for \u0026quot;hold in trust, administer for others\u0026quot; in Maori. More info \u003Ca href=\u0022http:\/\/maoridictionary.co.nz\/search?keywords=tiaki\u0022 target=\u0022_blank\u0022\u003Ehere\u003C\/a\u003E.\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/iot.tiaki","logo":null,"website":null,"state":"Incubating","provisioned":true},"iot.hawkbit":{"name":"hawkBit","id":"iot.hawkbit","description":"\u003Cp style=\u0022margin: 10px 0px 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 20px;\u0022\u003EProject hawkBit aims to create a \u003Cstrong\u003Edomain independent back end\u003C\/strong\u003E solution for rolling out \u003Cstrong\u003Esoftware updates\u003C\/strong\u003E to constrained edge \u003Cstrong\u003Edevices\u003C\/strong\u003E as well as more powerful controllers and gateways connected to IP based networking infrastructure. Devices can be connected to the hawkBit server either directly through an optimized interface or indirectly through federated\u0026nbsp;device management servers.\u003C\/p\u003E\r\n\u003Cp style=\u0022margin: 10px 0px 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 20px;\u0022\u003E\u003Cimg alt=\u0022\u0022 src=\u0022\/sites\/default\/files\/pictures\/hawkBit.png\u0022 style=\u0022width: 700px; height: 348px;\u0022 \/\u003E\u003C\/p\u003E\r\n\u003Cp style=\u0022margin: 10px 0px 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 20px;\u0022\u003EhawkBit is device and communication channel neutral by means of supporting:\u003C\/p\u003E\r\n\u003Cul style=\u0022margin: 10px 0px 0px 25px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 20px;\u0022\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cstrong\u003ESoftware\u003C\/strong\u003E\u0026nbsp;and\u0026nbsp;Operating system\u0026nbsp;updates for\u0026nbsp;M2M gateways\u0026nbsp;(typically but bot necessarily running Linux)\u0026nbsp;and\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cstrong\u003EFirmware\u003C\/strong\u003E\u0026nbsp;updates for\u0026nbsp;embedded\u0026nbsp;devices\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp style=\u0022margin: 10px 0px 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 20px;\u0022\u003Eboth for\u003C\/p\u003E\r\n\u003Cul style=\u0022margin: 10px 0px 0px 25px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 20px;\u0022\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cstrong\u003Ecable\u003C\/strong\u003E\u0026nbsp;or\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cstrong\u003Eover the air\u003C\/strong\u003E\u0026nbsp;(OTA) connected devices\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp style=\u0022margin: 10px 0px 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 20px;\u0022\u003EFeatures at a glance:\u003C\/p\u003E\r\n\u003Cul style=\u0022margin: 10px 0px 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 20px;\u0022\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cp style=\u0022margin: 0px; padding: 0px; background-color: transparent;\u0022\u003EA device and software repository.\u003C\/p\u003E\r\n\t\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cp style=\u0022margin: 0px; padding: 0px; background-color: transparent;\u0022\u003EArtifact content delivery.\u003C\/p\u003E\r\n\t\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cp style=\u0022margin: 0px; padding: 0px; background-color: transparent;\u0022\u003ESoftware update and roll out management.\u003C\/p\u003E\r\n\t\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cp style=\u0022margin: 0px; padding: 0px; background-color: transparent;\u0022\u003EReporting and monitoring.\u003C\/p\u003E\r\n\t\u003C\/li\u003E\r\n\t\u003Cli\u003E\r\n\t\t\u003Cp style=\u0022margin: 0px; padding: 0px; background-color: transparent;\u0022\u003EInterfaces:\u003C\/p\u003E\r\n\t\t\u003Cul style=\u0022margin: 0px; list-style-type: disc;\u0022\u003E\r\n\t\t\t\u003Cli\u003E\r\n\t\t\t\t\u003Cp style=\u0022margin: 0px; padding: 0px; background-color: transparent;\u0022\u003Efor direct device control.\u003C\/p\u003E\r\n\t\t\t\u003C\/li\u003E\r\n\t\t\t\u003Cli\u003E\r\n\t\t\t\t\u003Cp style=\u0022margin: 0px; padding: 0px; background-color: transparent;\u0022\u003Efor IoT solutions or applications to manage the repository and the roll outs.\u003C\/p\u003E\r\n\t\t\t\u003C\/li\u003E\r\n\t\t\t\u003Cli\u003E\r\n\t\t\t\t\u003Cp style=\u0022margin: 0px; padding: 0px; background-color: transparent;\u0022\u003Efor device management federation (i.e. indirect device control)\u003C\/p\u003E\r\n\t\t\t\u003C\/li\u003E\r\n\t\t\t\u003Cli\u003E\r\n\t\t\t\t\u003Cp style=\u0022margin: 0px; padding: 0px; background-color: transparent;\u0022\u003Eand a user interface to operators to manage and run the roll outs.\u003C\/p\u003E\r\n\t\t\t\u003C\/li\u003E\r\n\t\t\u003C\/ul\u003E\r\n\t\u003C\/li\u003E\r\n\u003C\/ul\u003E\r\n\u003Cp style=\u0022margin: 10px 0px 0px; padding: 0px; color: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 14px; line-height: 20px;\u0022\u003E\u003Cimg alt=\u0022\u0022 src=\u0022\/sites\/default\/files\/pictures\/SP_Intro.png\u0022 style=\u0022width: 700px; height: 492px;\u0022 \/\u003E\u003C\/p\u003E","url":"https:\/\/projects.eclipse.org\/projects\/iot.hawkbit","logo":null,"website":null,"state":"Incubating","provisioned":true}}